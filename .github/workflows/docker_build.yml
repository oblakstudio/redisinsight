name: Docker builds
on:
  release:
    types:
      - created
  push:
    branches:
      - master

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: oblakstudio/redisinsight

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Docker BuildX
        uses: actions/cache@v4
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-ri-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-ri
            ${{ runner.os }}-buildx-

      - name: Prepare version number
        id: prepare
        run: |
          VERSION=$(git describe --always --tags)
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="${{ env.REGISTRY_IMAGE }}:$VERSION,${{ env.REGISTRY_IMAGE }}:latest"
          else
            TAGS="${{ env.REGISTRY_IMAGE }}:$VERSION,${{ env.REGISTRY_IMAGE }}:development"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build the Docker image and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ steps.prepare.outputs.tags }}
          build-args: |
            VERSION=${{ steps.prepare.outputs.version }}
            BUILD_DATE=${{ steps.prepare.outputs.created }}
            GIT_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Redis Insight v2
            org.opencontainers.image.description=Docker Optimized Redis Insight v2
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prepare.outputs.version }}
            org.opencontainers.image.created=${{ steps.prepare.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache
